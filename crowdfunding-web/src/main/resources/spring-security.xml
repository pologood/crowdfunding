<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
    http://www.springframework.org/schema/security   
    http://www.springframework.org/schema/security/spring-security-3.1.xsd">


	<!-- 定义上下文返回的消息的国际化。 -->

	<beans:bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basename"
			value="classpath:org/springframework/security/messages_zh_CN" />
	</beans:bean>

	<!-- Spring security provides two major areas of application security are 
		“authentication” and “authorization” 授权和认证 -->
	<!-- http配置如何拦截用户请求。将auto-config设为'true'将自动配置几种常用的权限控制机制，包括form, anonymous, 
		rememberMe。 -->

	<http auto-config="true">
		<!-- 我们利用intercept-url来判断用户需要具有何种权限才能访问对应的url资源， 可以在pattern中指定一个特定的url资源，也可以使用通配符指定一组类似的url资源。 
			例子中定义的两个intercepter-url，第一个用来控制对/admin.jsp的访问， 第二个使用了通配符/**，说明它将控制对系统中所有url资源的访问。 
			在实际使用中，Spring Security采用的是一种就近原则， 就是说当用户访问的url资源满足多个intercepter-url时， 系统将使用第一个符合条件的intercept-url进行权限控制。 
			在我们这个例子中就是，当用户访问/admin.jsp时， 虽然两个intercept-url都满足要求， 但因为第一个intercept-url排在上面， 
			所以Spring Security会使用第一个intercept-url中的配置处理对/admin.jsp的请求， 也就是说，只有那些拥有了ROLE_ADMIN权限的用户才能访问/admin.jsp。 -->
		<!-- <intercept-url pattern="/pages/admin.jsp" access="ROLE_ADMIN" /> -->
		<intercept-url pattern="/pages/login.jsp" filters="none" />
		<intercept-url pattern="/pages/css/**" filters="none" />
		<intercept-url pattern="/pages/js/**" filters="none" />
		<intercept-url pattern="/pages/images/**" filters="none" />
		<!-- <intercept-url pattern="/**" access="ROLE_USER,ROLE_ADMIN" /> -->
		<form-login login-page="/pages/login.jsp"
			default-target-url="/pages/index.jsp" always-use-default-target="true" />
		<custom-filter ref="filterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR" />
	</http>


	<!-- 认证管理:提供用户权限对应关系 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="customUserDatailsService">
			<!-- user-service中定义了两个用户，admin和user, 重要的部分是authorities，这里定义了这个用户登陆之后将会拥有的权限， 
				它与上面intercept-url中定义的权限内容一一对应。每个用户可以同时拥有多个权限， 例子中的admin用户就拥有ROLE_ADMIN和ROLE_USER两种权限， 
				这使得admin用户在登陆之后可以访问ROLE_ADMIN和ROLE_USER允许访问的所有资源。 与之对应的是，user用户就只拥有ROLE_USER权限，所以他只能访问ROLE_USER允许访问的资源， 
				而不能访问ROLE_ADMIN允许访问的资源。 -->
			<!-- <user-service> <user name="admin" password="admin" authorities="ROLE_USER,ROLE_ADMIN" 
				/> <user name="user" password="user" authorities="ROLE_USER" /> </user-service> -->
		</authentication-provider>
	</authentication-manager>


	<!-- 访问决策管理:通过资源所拥有的权限，对用户所具备的角色对应的权限进行裁定，决策是否用户具备访问资源的权限 -->

	<beans:bean id="accessDecisionManager"
		class="org.wit.ff.authentication.CustomAccessDecisionManager">
		<beans:property name="allowIfAllAbstainDecisions"
			value="false" />
		<beans:property name="decisionVoters">
			<beans:list>
				<beans:bean class="org.springframework.security.access.vote.RoleVoter" />
				<beans:bean
					class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</beans:list>
		</beans:property>
	</beans:bean>


	<!--使用Spring security3提供的过滤器,并将过滤器默认的认证和授权组件替换为我们已经定义的认证和授权组件 -->

	<beans:bean id="filterSecurityInterceptor"
		class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="accessDecisionManager" ref="accessDecisionManager" />
		<beans:property name="securityMetadataSource" ref="customSecurityMetadataSource" />
	</beans:bean>

	<beans:bean id="customSecurityMetadataSource"
		class="org.wit.ff.authentication.CustomFilterInvocationSecurityMetadataSource" />

	<!-- 自定义授权用户信息处理 -->

	<beans:bean id="customUserDatailsService"
		class="org.wit.ff.authentication.CustomUserDetailsService" />


</beans:beans>    